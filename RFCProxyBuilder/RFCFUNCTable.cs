
//------------------------------------------------------------------------------
// 
//     This code was generated by a SAP. NET Connector Proxy Generator Version 2.0
//     Created at 2006-12-13
//     Created from Windows
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// 
//------------------------------------------------------------------------------
using System;
//using System.Text;
//using System.Collections;
//using System.Runtime.InteropServices;
using System.Xml.Serialization;
//using System.Web.Services;
//using System.Web.Services.Description;
//using System.Web.Services.Protocols;
using SAP.Connector;

namespace RFCProxyBuilder
{
  /// <summary>
  /// A typed collection of RFCFUNC elements.
  /// </summary>
  [Serializable]
  public class RFCFUNCTable : SAPTable 
  {
  
    /// <summary>
    /// Returns the element type RFCFUNC.
    /// </summary>
    /// <returns>The type RFCFUNC.</returns>
    public override Type GetElementType() 
    {
        return (typeof(RFCFUNC));
    }

    /// <summary>
    /// Creates an empty new row of type RFCFUNC.
    /// </summary>
    /// <returns>The newRFCFUNC.</returns>
    public override object CreateNewRow()
    { 
        return new RFCFUNC();
    }
     
    /// <summary>
    /// The indexer of the collection.
    /// </summary>
    public RFCFUNC this[int index] 
    {
        get 
        {
            return ((RFCFUNC)(List[index]));
        }
        set 
        {
            List[index] = value;
        }
    }
        
    /// <summary>
    /// Adds a RFCFUNC to the end of the collection.
    /// </summary>
    /// <param name="value">The RFCFUNC to be added to the end of the collection.</param>
    /// <returns>The index of the newRFCFUNC.</returns>
    public int Add(RFCFUNC value) 
    {
        return List.Add(value);
    }
        
    /// <summary>
    /// Inserts a RFCFUNC into the collection at the specified index.
    /// </summary>
    /// <param name="index">The zero-based index at which value should be inserted.</param>
    /// <param name="value">The RFCFUNC to insert.</param>
    public void Insert(int index, RFCFUNC value) 
    {
        List.Insert(index, value);
    }
        
    /// <summary>
    /// Searches for the specified RFCFUNC and returnes the zero-based index of the first occurrence in the collection.
    /// </summary>
    /// <param name="value">The RFCFUNC to locate in the collection.</param>
    /// <returns>The index of the object found or -1.</returns>
    public int IndexOf(RFCFUNC value) 
    {
        return List.IndexOf(value);
    }
        
    /// <summary>
    /// Determines wheter an element is in the collection.
    /// </summary>
    /// <param name="value">The RFCFUNC to locate in the collection.</param>
    /// <returns>True if found; else false.</returns>
    public bool Contains(RFCFUNC value) 
    {
        return List.Contains(value);
    }
        
    /// <summary>
    /// Removes the first occurrence of the specified RFCFUNC from the collection.
    /// </summary>
    /// <param name="value">The RFCFUNC to remove from the collection.</param>
    public void Remove(RFCFUNC value) 
    {
        List.Remove(value);
    }

    /// <summary>
    /// Copies the contents of the RFCFUNCTable to the specified one-dimensional array starting at the specified index in the target array.
    /// </summary>
    /// <param name="array">The one-dimensional destination array.</param>           
    /// <param name="index">The zero-based index in array at which copying begins.</param>           
    public void CopyTo(RFCFUNC[] array, int index) 
    {
        List.CopyTo(array, index);
	}
  }
}
